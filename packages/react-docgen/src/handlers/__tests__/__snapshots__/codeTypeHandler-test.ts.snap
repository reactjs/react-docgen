// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`codeTypeHandler > TypeAlias (flow) > class definition with State > detects intersection types 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "Foo",
        },
        {
          "name": "Bar",
        },
      ],
      "name": "intersection",
      "raw": "Foo & Bar",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition with State > detects types correctly 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "name": "number",
    },
    "required": true,
  },
  "foo": {
    "description": "",
    "flowType": {
      "name": "string",
    },
    "required": true,
  },
  "hal": {
    "description": "",
    "flowType": {
      "name": "boolean",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition with State > detects union types 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "literal",
          "value": ""test"",
        },
        {
          "name": "literal",
          "value": "1",
        },
        {
          "name": "literal",
          "value": "true",
        },
      ],
      "name": "union",
      "raw": ""test" | 1 | true",
    },
    "required": true,
  },
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition with State > detects whether a prop is required 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "name": "number",
    },
    "required": false,
  },
  "foo": {
    "description": "",
    "flowType": {
      "name": "string",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition with State > ignores hash map entry 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "name": "number",
    },
    "required": false,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition with State > special generic type annotations > unwraps $Exact<...> 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition with State > special generic type annotations > unwraps $ReadOnly<...> 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition with inline props > detects intersection types 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "Foo",
        },
        {
          "name": "Bar",
        },
      ],
      "name": "intersection",
      "raw": "Foo & Bar",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition with inline props > detects types correctly 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "name": "number",
    },
    "required": true,
  },
  "foo": {
    "description": "",
    "flowType": {
      "name": "string",
    },
    "required": true,
  },
  "hal": {
    "description": "",
    "flowType": {
      "name": "boolean",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition with inline props > detects union types 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "literal",
          "value": ""test"",
        },
        {
          "name": "literal",
          "value": "1",
        },
        {
          "name": "literal",
          "value": "true",
        },
      ],
      "name": "union",
      "raw": ""test" | 1 | true",
    },
    "required": true,
  },
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition with inline props > detects whether a prop is required 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "name": "number",
    },
    "required": false,
  },
  "foo": {
    "description": "",
    "flowType": {
      "name": "string",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition with inline props > ignores hash map entry 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "name": "number",
    },
    "required": false,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition with inline props > special generic type annotations > unwraps $Exact<...> 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition with inline props > special generic type annotations > unwraps $ReadOnly<...> 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition without State > detects intersection types 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "Foo",
        },
        {
          "name": "Bar",
        },
      ],
      "name": "intersection",
      "raw": "Foo & Bar",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition without State > detects types correctly 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "name": "number",
    },
    "required": true,
  },
  "foo": {
    "description": "",
    "flowType": {
      "name": "string",
    },
    "required": true,
  },
  "hal": {
    "description": "",
    "flowType": {
      "name": "boolean",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition without State > detects union types 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "literal",
          "value": ""test"",
        },
        {
          "name": "literal",
          "value": "1",
        },
        {
          "name": "literal",
          "value": "true",
        },
      ],
      "name": "union",
      "raw": ""test" | 1 | true",
    },
    "required": true,
  },
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition without State > detects whether a prop is required 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "name": "number",
    },
    "required": false,
  },
  "foo": {
    "description": "",
    "flowType": {
      "name": "string",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition without State > ignores hash map entry 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "name": "number",
    },
    "required": false,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition without State > special generic type annotations > unwraps $Exact<...> 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > class definition without State > special generic type annotations > unwraps $ReadOnly<...> 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > stateless component > detects intersection types 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "Foo",
        },
        {
          "name": "Bar",
        },
      ],
      "name": "intersection",
      "raw": "Foo & Bar",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > stateless component > detects types correctly 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "name": "number",
    },
    "required": true,
  },
  "foo": {
    "description": "",
    "flowType": {
      "name": "string",
    },
    "required": true,
  },
  "hal": {
    "description": "",
    "flowType": {
      "name": "boolean",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > stateless component > detects union types 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "literal",
          "value": ""test"",
        },
        {
          "name": "literal",
          "value": "1",
        },
        {
          "name": "literal",
          "value": "true",
        },
      ],
      "name": "union",
      "raw": ""test" | 1 | true",
    },
    "required": true,
  },
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > stateless component > detects whether a prop is required 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "name": "number",
    },
    "required": false,
  },
  "foo": {
    "description": "",
    "flowType": {
      "name": "string",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > stateless component > ignores hash map entry 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "name": "number",
    },
    "required": false,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > stateless component > special generic type annotations > unwraps $Exact<...> 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (flow) > stateless component > special generic type annotations > unwraps $ReadOnly<...> 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition with State > detects intersection types 1`] = `
{
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "elements": [
        {
          "name": "Foo",
        },
        {
          "name": "Bar",
        },
      ],
      "name": "intersection",
      "raw": "Foo & Bar",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition with State > detects types correctly 1`] = `
{
  "bar": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "number",
    },
  },
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "string",
    },
  },
  "hal": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "boolean",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition with State > detects union types 1`] = `
{
  "bar": {
    "description": "",
    "required": true,
    "tsType": {
      "elements": [
        {
          "name": "literal",
          "value": ""test"",
        },
        {
          "name": "literal",
          "value": "1",
        },
        {
          "name": "literal",
          "value": "true",
        },
      ],
      "name": "union",
      "raw": ""test" | 1 | true",
    },
  },
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition with State > detects whether a prop is required 1`] = `
{
  "bar": {
    "description": "",
    "required": false,
    "tsType": {
      "name": "number",
    },
  },
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "string",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition with State > ignores hash map entry 1`] = `
{
  "bar": {
    "description": "",
    "required": false,
    "tsType": {
      "name": "number",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition with State > special generic type annotations > unwraps $Exact<...> 1`] = `{}`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition with State > special generic type annotations > unwraps $ReadOnly<...> 1`] = `{}`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition with inline props > detects intersection types 1`] = `
{
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "elements": [
        {
          "name": "Foo",
        },
        {
          "name": "Bar",
        },
      ],
      "name": "intersection",
      "raw": "Foo & Bar",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition with inline props > detects types correctly 1`] = `
{
  "bar": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "number",
    },
  },
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "string",
    },
  },
  "hal": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "boolean",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition with inline props > detects union types 1`] = `
{
  "bar": {
    "description": "",
    "required": true,
    "tsType": {
      "elements": [
        {
          "name": "literal",
          "value": ""test"",
        },
        {
          "name": "literal",
          "value": "1",
        },
        {
          "name": "literal",
          "value": "true",
        },
      ],
      "name": "union",
      "raw": ""test" | 1 | true",
    },
  },
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition with inline props > detects whether a prop is required 1`] = `
{
  "bar": {
    "description": "",
    "required": false,
    "tsType": {
      "name": "number",
    },
  },
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "string",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition with inline props > ignores hash map entry 1`] = `
{
  "bar": {
    "description": "",
    "required": false,
    "tsType": {
      "name": "number",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition with inline props > special generic type annotations > unwraps $Exact<...> 1`] = `{}`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition with inline props > special generic type annotations > unwraps $ReadOnly<...> 1`] = `{}`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition without State > detects intersection types 1`] = `
{
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "elements": [
        {
          "name": "Foo",
        },
        {
          "name": "Bar",
        },
      ],
      "name": "intersection",
      "raw": "Foo & Bar",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition without State > detects types correctly 1`] = `
{
  "bar": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "number",
    },
  },
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "string",
    },
  },
  "hal": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "boolean",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition without State > detects union types 1`] = `
{
  "bar": {
    "description": "",
    "required": true,
    "tsType": {
      "elements": [
        {
          "name": "literal",
          "value": ""test"",
        },
        {
          "name": "literal",
          "value": "1",
        },
        {
          "name": "literal",
          "value": "true",
        },
      ],
      "name": "union",
      "raw": ""test" | 1 | true",
    },
  },
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition without State > detects whether a prop is required 1`] = `
{
  "bar": {
    "description": "",
    "required": false,
    "tsType": {
      "name": "number",
    },
  },
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "string",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition without State > ignores hash map entry 1`] = `
{
  "bar": {
    "description": "",
    "required": false,
    "tsType": {
      "name": "number",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition without State > special generic type annotations > unwraps $Exact<...> 1`] = `{}`;

exports[`codeTypeHandler > TypeAlias (ts) > class definition without State > special generic type annotations > unwraps $ReadOnly<...> 1`] = `{}`;

exports[`codeTypeHandler > TypeAlias (ts) > stateless component > detects intersection types 1`] = `
{
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "elements": [
        {
          "name": "Foo",
        },
        {
          "name": "Bar",
        },
      ],
      "name": "intersection",
      "raw": "Foo & Bar",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > stateless component > detects types correctly 1`] = `
{
  "bar": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "number",
    },
  },
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "string",
    },
  },
  "hal": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "boolean",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > stateless component > detects union types 1`] = `
{
  "bar": {
    "description": "",
    "required": true,
    "tsType": {
      "elements": [
        {
          "name": "literal",
          "value": ""test"",
        },
        {
          "name": "literal",
          "value": "1",
        },
        {
          "name": "literal",
          "value": "true",
        },
      ],
      "name": "union",
      "raw": ""test" | 1 | true",
    },
  },
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > stateless component > detects whether a prop is required 1`] = `
{
  "bar": {
    "description": "",
    "required": false,
    "tsType": {
      "name": "number",
    },
  },
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "string",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > stateless component > ignores hash map entry 1`] = `
{
  "bar": {
    "description": "",
    "required": false,
    "tsType": {
      "name": "number",
    },
  },
}
`;

exports[`codeTypeHandler > TypeAlias (ts) > stateless component > special generic type annotations > unwraps $Exact<...> 1`] = `{}`;

exports[`codeTypeHandler > TypeAlias (ts) > stateless component > special generic type annotations > unwraps $ReadOnly<...> 1`] = `{}`;

exports[`codeTypeHandler > class definition for flow <0.53 > detects intersection types 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "Foo",
        },
        {
          "name": "Bar",
        },
      ],
      "name": "intersection",
      "raw": "Foo & Bar",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > class definition for flow <0.53 > detects types correctly 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "name": "number",
    },
    "required": true,
  },
  "foo": {
    "description": "",
    "flowType": {
      "name": "string",
    },
    "required": true,
  },
  "hal": {
    "description": "",
    "flowType": {
      "name": "boolean",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > class definition for flow <0.53 > detects union types 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "literal",
          "value": ""test"",
        },
        {
          "name": "literal",
          "value": "1",
        },
        {
          "name": "literal",
          "value": "true",
        },
      ],
      "name": "union",
      "raw": ""test" | 1 | true",
    },
    "required": true,
  },
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > class definition for flow <0.53 > detects whether a prop is required 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "name": "number",
    },
    "required": false,
  },
  "foo": {
    "description": "",
    "flowType": {
      "name": "string",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > class definition for flow <0.53 > ignores hash map entry 1`] = `
{
  "bar": {
    "description": "",
    "flowType": {
      "name": "number",
    },
    "required": false,
  },
}
`;

exports[`codeTypeHandler > class definition for flow <0.53 > special generic type annotations > unwraps $Exact<...> 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > class definition for flow <0.53 > special generic type annotations > unwraps $ReadOnly<...> 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > does support utility types inline 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "name": "literal",
      "value": "'fooValue'",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > forwardRef > resolves prop type from function expression 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "name": "string",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > forwardRef > resolves when the function is not inline 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "name": "string",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > forwardRef > resolves when the function is rebound and not inline 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "name": "string",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > imported prop types > imported 1`] = `
{
  "abc": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
    "required": true,
  },
  "bar": {
    "description": "",
    "flowType": {
      "name": "number",
    },
    "required": false,
  },
  "def": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "literal",
          "value": ""test"",
        },
        {
          "name": "literal",
          "value": "1",
        },
        {
          "name": "literal",
          "value": "true",
        },
      ],
      "name": "union",
      "raw": ""test" | 1 | true",
    },
    "required": true,
  },
  "foo": {
    "description": "",
    "flowType": {
      "name": "string",
    },
    "required": true,
  },
  "foobar": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "Foo",
        },
        {
          "name": "Bar",
        },
      ],
      "name": "intersection",
      "raw": "Foo & Bar",
    },
    "required": true,
  },
  "hal": {
    "description": "",
    "flowType": {
      "name": "boolean",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > imported prop types > type imported 1`] = `
{
  "abc": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
    "required": true,
  },
  "bar": {
    "description": "",
    "flowType": {
      "name": "number",
    },
    "required": false,
  },
  "def": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "literal",
          "value": ""test"",
        },
        {
          "name": "literal",
          "value": "1",
        },
        {
          "name": "literal",
          "value": "true",
        },
      ],
      "name": "union",
      "raw": ""test" | 1 | true",
    },
    "required": true,
  },
  "foo": {
    "description": "",
    "flowType": {
      "name": "string",
    },
    "required": true,
  },
  "foobar": {
    "description": "",
    "flowType": {
      "elements": [
        {
          "name": "Foo",
        },
        {
          "name": "Bar",
        },
      ],
      "name": "intersection",
      "raw": "Foo & Bar",
    },
    "required": true,
  },
  "hal": {
    "description": "",
    "flowType": {
      "name": "boolean",
    },
    "required": true,
  },
}
`;

exports[`codeTypeHandler > stateless TS component and variable type takes precedence 1`] = `
{
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "number | string",
    },
  },
}
`;

exports[`codeTypeHandler > stateless TS component with 2 definitions 1`] = `
{
  "additional": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "boolean",
    },
  },
  "bar": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "number",
    },
  },
}
`;

exports[`codeTypeHandler > stateless TS component with Type > detects intersection types 1`] = `
{
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "elements": [
        {
          "name": "Foo",
        },
        {
          "name": "Bar",
        },
      ],
      "name": "intersection",
      "raw": "Foo & Bar",
    },
  },
}
`;

exports[`codeTypeHandler > stateless TS component with Type > detects types correctly 1`] = `
{
  "bar": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "number",
    },
  },
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "string",
    },
  },
  "hal": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "boolean",
    },
  },
}
`;

exports[`codeTypeHandler > stateless TS component with Type > detects union types 1`] = `
{
  "bar": {
    "description": "",
    "required": true,
    "tsType": {
      "elements": [
        {
          "name": "literal",
          "value": ""test"",
        },
        {
          "name": "literal",
          "value": "1",
        },
        {
          "name": "literal",
          "value": "true",
        },
      ],
      "name": "union",
      "raw": ""test" | 1 | true",
    },
  },
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "elements": [
        {
          "name": "string",
        },
        {
          "name": "number",
        },
      ],
      "name": "union",
      "raw": "string | number",
    },
  },
}
`;

exports[`codeTypeHandler > stateless TS component with Type > detects whether a prop is required 1`] = `
{
  "bar": {
    "description": "",
    "required": false,
    "tsType": {
      "name": "number",
    },
  },
  "foo": {
    "description": "",
    "required": true,
    "tsType": {
      "name": "string",
    },
  },
}
`;

exports[`codeTypeHandler > stateless TS component with Type > ignores hash map entry 1`] = `
{
  "bar": {
    "description": "",
    "required": false,
    "tsType": {
      "name": "number",
    },
  },
}
`;

exports[`codeTypeHandler > stateless TS component with Type > special generic type annotations > unwraps $Exact<...> 1`] = `{}`;

exports[`codeTypeHandler > stateless TS component with Type > special generic type annotations > unwraps $ReadOnly<...> 1`] = `{}`;

exports[`codeTypeHandler > supports intersection proptypes 1`] = `
{
  "foo": {
    "description": "",
    "flowType": {
      "name": "literal",
      "value": "'bar'",
    },
    "required": true,
  },
}
`;
